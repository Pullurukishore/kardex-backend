generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Notification {
  id        Int                @id @default(autoincrement())
  userId    Int
  title     String
  message   String
  type      NotificationType
  status    NotificationStatus @default(UNREAD)
  data      Json?
  readAt    DateTime?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
  user      User               @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, status])
  @@index([userId, createdAt])
}

model User {
  id                             Int                      @id @default(autoincrement())
  email                          String                   @unique
  password                       String
  role                           UserRole                 @default(ZONE_USER)
  name                           String?
  phone                          String?
  zoneId                         String?
  createdAt                      DateTime                 @default(now())
  updatedAt                      DateTime                 @updatedAt
  lastLoginAt                    DateTime?
  isActive                       Boolean                  @default(true)
  refreshToken                   String?                  @db.VarChar(255)
  refreshTokenExpires            DateTime?
  tokenVersion                   String                   @db.VarChar(36)
  customerId                     Int?
  otp                            String?                  @unique
  otpExpiresAt                   DateTime?
  failedLoginAttempts            Int                      @default(0)
  accountLockedUntil             DateTime?
  lastFailedLogin                DateTime?
  lastPasswordChange             DateTime?                @default(now())
  passwordResetToken             String?                  @unique
  passwordResetExpires           DateTime?
  lastActiveAt                   DateTime?
  ipAddress                      String?
  userAgent                      String?
  resolvedValidations            AssetValidationPending[] @relation("ResolvedValidations")
  attachments                    Attachment[]             @relation("UserAttachments")
  attendance                     Attendance[]             @relation("UserAttendance")
  auditLogs                      AuditLog[]               @relation("UserAuditLogs")
  AuditLog_AuditLog_userIdToUser AuditLog[]               @relation("AuditLog_userIdToUser")
  callLogsAsCaller               CallLog[]                @relation("CallerLogs")
  callLogsAsReceiver             CallLog[]                @relation("ReceiverLogs")
  comments                       Comment[]                @relation("UserComments")
  createdCustomers               Customer[]               @relation("CustomerCreatedBy")
  updatedCustomers               Customer[]               @relation("CustomerUpdatedBy")
  activityLogs                   DailyActivityLog[]       @relation("UserActivityLogs")
  notifications                  Notification[]
  onsiteVisitLogs                OnsiteVisitLog[]         @relation("UserOnsiteVisitLogs")
  approvedPOs                    PORequest[]              @relation("ApprovedPOs")
  requestedPOs                   PORequest[]              @relation("RequestedPOs")
  serviceHistory                 ServiceHistory[]         @relation("UserServiceHistory")
  serviceZones                   ServicePersonZone[]      @relation("UserServiceZones")
  assignedTickets                Ticket[]                 @relation("AssignedTickets")
  createdTickets                 Ticket[]                 @relation("TicketCreator")
  ownedTickets                   Ticket[]                 @relation("TicketOwner")
  subOwnedTickets                Ticket[]                 @relation("TicketSubOwner")
  submittedFeedbacks             TicketFeedback[]         @relation("SubmittedFeedbacks")
  ticketNotes                    TicketNote[]             @relation("UserTicketNotes")
  ticketReports                  TicketReport[]           @relation("UserTicketReports")
  statusHistoryChanges           TicketStatusHistory[]    @relation("UserStatusChanges")
  customer                       Customer?                @relation("UserCustomer", fields: [customerId], references: [id])
}

model Customer {
  id            Int         @id @default(autoincrement())
  companyName   String
  address       String?
  industry      String?
  timezone      String      @default("UTC")
  serviceZoneId Int
  isActive      Boolean     @default(true)
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  createdById   Int
  updatedById   Int
  assets        Asset[]     @relation("CustomerAssets")
  contacts      Contact[]   @relation("CustomerContacts")
  createdBy     User        @relation("CustomerCreatedBy", fields: [createdById], references: [id])
  serviceZone   ServiceZone @relation(fields: [serviceZoneId], references: [id])
  updatedBy     User        @relation("CustomerUpdatedBy", fields: [updatedById], references: [id])
  ratings       Rating[]    @relation("CustomerRatings")
  tickets       Ticket[]    @relation("CustomerTickets")
  users         User[]      @relation("UserCustomer")
}

model Contact {
  id           Int         @id @default(autoincrement())
  name         String
  email        String?
  phone        String
  role         ContactRole @default(CONTACT)
  customerId   Int
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt
  passwordHash String?
  customer     Customer    @relation("CustomerContacts", fields: [customerId], references: [id])
  tickets      Ticket[]    @relation("ContactTickets")
}

model ServiceZone {
  id             Int                 @id @default(autoincrement())
  name           String
  description    String?
  isActive       Boolean             @default(true)
  createdAt      DateTime            @default(now())
  updatedAt      DateTime            @updatedAt
  customers      Customer[]
  servicePersons ServicePersonZone[] @relation("ServiceZonePersons")
  tickets        Ticket[]            @relation("TicketZone")
}

model ServicePersonZone {
  userId        Int
  serviceZoneId Int
  serviceZone   ServiceZone @relation("ServiceZonePersons", fields: [serviceZoneId], references: [id])
  user          User        @relation("UserServiceZones", fields: [userId], references: [id])

  @@id([userId, serviceZoneId])
}

model Asset {
  id             Int              @id @default(autoincrement())
  machineId      String           @unique
  model          String?
  serialNo       String?          @unique
  location       String?
  status         String           @default("ACTIVE")
  customerId     Int
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  customer       Customer         @relation("CustomerAssets", fields: [customerId], references: [id])
  serviceHistory ServiceHistory[] @relation("TicketServiceHistory")
  tickets        Ticket[]         @relation("AssetTickets")
}

model Ticket {
  id                      Int                   @id @default(autoincrement())
  title                   String
  description             String
  status                  TicketStatus          @default(OPEN)
  priority                Priority              @default(MEDIUM)
  callType                CallType?
  slaDueAt                DateTime?
  slaStatus               SLAStatus?
  customerId              Int
  contactId               Int
  assetId                 Int
  ownerId                 Int
  subOwnerId              Int?
  createdById             Int
  createdAt               DateTime              @default(now())
  updatedAt               DateTime              @updatedAt
  assignedToId            Int?
  actualResolutionTime    Int?
  dueDate                 DateTime?
  errorDetails            String?
  escalatedAt             DateTime?
  escalatedBy             Int?
  escalatedReason         String?
  estimatedResolutionTime Int?
  isCritical              Boolean               @default(false)
  isEscalated             Boolean               @default(false)
  lastStatusChange        DateTime?             @default(now())
  poApprovedAt            DateTime?
  poApprovedById          Int?
  poNumber                String?
  proofImages             String?
  relatedMachineIds       String?
  resolutionSummary       String?
  sparePartsDetails       String?
  timeInStatus            Int?
  totalTimeOpen           Int?
  visitCompletedDate      DateTime?
  visitPlannedDate        DateTime?
  zoneId                  Int
  onsiteEndLocation       String?
  onsiteLocationHistory   String?
  onsiteStartLocation     String?
  poReachedAt             DateTime?
  visitInProgressAt       DateTime?
  visitReachedAt          DateTime?
  visitResolvedAt         DateTime?
  visitStartedAt          DateTime?
  attachments             Attachment[]          @relation("TicketAttachments")
  auditLogs               AuditLog[]            @relation("TicketAuditLogs")
  callLogs                CallLog[]             @relation("TicketCallLogs")
  comments                Comment[]             @relation("TicketComments")
  activityLogs            DailyActivityLog[]    @relation("TicketActivityLogs")
  onsiteVisitLogs         OnsiteVisitLog[]      @relation("TicketOnsiteVisitLogs")
  poRequests              PORequest?            @relation("TicketPORequests")
  rating                  Rating?               @relation("TicketRating")
  serviceHistory          ServiceHistory[]      @relation("TicketServiceHistory")
  asset                   Asset                 @relation("AssetTickets", fields: [assetId], references: [id])
  assignedTo              User?                 @relation("AssignedTickets", fields: [assignedToId], references: [id])
  contact                 Contact               @relation("ContactTickets", fields: [contactId], references: [id])
  createdBy               User                  @relation("TicketCreator", fields: [createdById], references: [id])
  customer                Customer              @relation("CustomerTickets", fields: [customerId], references: [id])
  owner                   User                  @relation("TicketOwner", fields: [ownerId], references: [id])
  subOwner                User?                 @relation("TicketSubOwner", fields: [subOwnerId], references: [id])
  zone                    ServiceZone           @relation("TicketZone", fields: [zoneId], references: [id])
  feedbacks               TicketFeedback[]
  notes                   TicketNote[]          @relation("TicketNotes")
  reports                 TicketReport[]        @relation("TicketReports")
  statusHistory           TicketStatusHistory[] @relation("TicketStatusHistory")
}

model Attachment {
  id           Int      @id @default(autoincrement())
  filename     String
  path         String
  mimeType     String
  size         Int
  ticketId     Int
  uploadedById Int
  createdAt    DateTime @default(now())
  ticket       Ticket   @relation("TicketAttachments", fields: [ticketId], references: [id])
  uploadedBy   User     @relation("UserAttachments", fields: [uploadedById], references: [id])
}

model TicketNote {
  id        Int      @id @default(autoincrement())
  content   String
  ticketId  Int
  authorId  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  author    User     @relation("UserTicketNotes", fields: [authorId], references: [id])
  ticket    Ticket   @relation("TicketNotes", fields: [ticketId], references: [id])
}

model CallLog {
  id         Int      @id @default(autoincrement())
  ticketId   Int
  callerId   Int
  receiverId Int?
  callType   String
  duration   Int?
  notes      String?
  recordedAt DateTime @default(now())
  caller     User     @relation("CallerLogs", fields: [callerId], references: [id])
  receiver   User?    @relation("ReceiverLogs", fields: [receiverId], references: [id])
  ticket     Ticket   @relation("TicketCallLogs", fields: [ticketId], references: [id])
}

model PORequest {
  id            Int       @id @default(autoincrement())
  ticketId      Int       @unique
  status        String    @default("PENDING")
  amount        Float?
  description   String?
  requestedById Int
  approvedById  Int?
  approvedAt    DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  approvedBy    User?     @relation("ApprovedPOs", fields: [approvedById], references: [id])
  requestedBy   User      @relation("RequestedPOs", fields: [requestedById], references: [id])
  ticket        Ticket    @relation("TicketPORequests", fields: [ticketId], references: [id])
}

model ServiceHistory {
  id            Int      @id @default(autoincrement())
  ticketId      Int
  assetId       Int
  serviceType   String
  description   String
  performedById Int
  performedAt   DateTime @default(now())
  duration      Int?
  notes         String?
  createdAt     DateTime @default(now())
  asset         Asset    @relation("TicketServiceHistory", fields: [assetId], references: [id])
  performedBy   User     @relation("UserServiceHistory", fields: [performedById], references: [id])
  ticket        Ticket   @relation("TicketServiceHistory", fields: [ticketId], references: [id])
}

model AuditLog {
  id                         Int      @id @default(autoincrement())
  action                     String
  details                    Json?
  entityType                 String?
  entityId                   Int?
  userId                     Int?
  ipAddress                  String?
  userAgent                  String?
  status                     String?
  metadata                   Json?
  oldValue                   Json?
  newValue                   Json?
  ticketId                   Int?
  performedById              Int?
  performedAt                DateTime @default(now())
  createdAt                  DateTime @default(now())
  updatedAt                  DateTime
  performedBy                User?    @relation("UserAuditLogs", fields: [performedById], references: [id])
  ticket                     Ticket?  @relation("TicketAuditLogs", fields: [ticketId], references: [id], onDelete: Cascade)
  User_AuditLog_userIdToUser User?    @relation("AuditLog_userIdToUser", fields: [userId], references: [id])

  @@index([performedById])
  @@index([performedAt])
  @@index([action])
  @@index([createdAt])
  @@index([entityType, entityId], map: "AuditLog_entity_idx")
  @@index([ticketId])
  @@index([userId])
}

model SLAPolicy {
  id             Int      @id @default(autoincrement())
  priority       Priority @unique
  responseTime   Int
  resolutionTime Int
  isActive       Boolean  @default(true)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model TicketFeedback {
  id            Int      @id @default(autoincrement())
  ticketId      Int
  rating        Int      @default(5)
  feedback      String?
  submittedById Int
  submittedAt   DateTime @default(now())
  updatedAt     DateTime @updatedAt
  submittedBy   User     @relation("SubmittedFeedbacks", fields: [submittedById], references: [id])
  ticket        Ticket   @relation(fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([submittedById])
}

model Comment {
  id         Int      @id @default(autoincrement())
  content    String
  isInternal Boolean  @default(false)
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  ticketId   Int
  userId     Int
  ticket     Ticket   @relation("TicketComments", fields: [ticketId], references: [id], onDelete: Cascade)
  user       User     @relation("UserComments", fields: [userId], references: [id])

  @@index([ticketId])
  @@index([userId])
}

model AssetValidationPending {
  id           Int       @id @default(autoincrement())
  machineId    String
  model        String?
  serialNo     String?
  customerId   Int?
  customerName String?
  status       String    @default("PENDING")
  resolvedById Int?
  resolvedAt   DateTime?
  notes        String?
  createdAt    DateTime  @default(now())
  updatedAt    DateTime  @updatedAt
  resolvedBy   User?     @relation("ResolvedValidations", fields: [resolvedById], references: [id])
}

model TicketStatusHistory {
  id            Int          @id @default(autoincrement())
  ticketId      Int
  status        TicketStatus
  changedById   Int
  changedAt     DateTime     @default(now())
  notes         String?
  timeInStatus  Int?
  totalTimeOpen Int?
  changedBy     User         @relation("UserStatusChanges", fields: [changedById], references: [id])
  ticket        Ticket       @relation("TicketStatusHistory", fields: [ticketId], references: [id])

  @@index([ticketId])
  @@index([changedById])
  @@index([changedAt])
  @@index([status])
}

model Rating {
  id            Int      @id @default(autoincrement())
  ticketId      Int      @unique
  customerId    Int
  rating        Int      @db.SmallInt
  feedback      String?
  customerPhone String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  source        String   @default("WEB")
  customer      Customer @relation("CustomerRatings", fields: [customerId], references: [id], onDelete: Cascade)
  ticket        Ticket   @relation("TicketRating", fields: [ticketId], references: [id], onDelete: Cascade)

  @@index([customerId])
  @@index([rating])
  @@index([createdAt])
  @@index([source])
}

model TicketReport {
  id           Int      @id @default(autoincrement())
  ticketId     Int
  fileName     String
  fileSize     Int
  fileType     String
  filePath     String
  uploadedById Int
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  ticket       Ticket   @relation("TicketReports", fields: [ticketId], references: [id], onDelete: Cascade)
  uploadedBy   User     @relation("UserTicketReports", fields: [uploadedById], references: [id])

  @@index([ticketId])
  @@index([uploadedById])
  @@index([createdAt])
}

model OnsiteVisitLog {
  id        Int              @id @default(autoincrement())
  ticketId  Int
  userId    Int
  event     OnsiteVisitEvent
  latitude  Decimal          @db.Decimal(10, 7)
  longitude Decimal          @db.Decimal(10, 7)
  address   String?
  createdAt DateTime         @default(now())
  ticket    Ticket           @relation("TicketOnsiteVisitLogs", fields: [ticketId], references: [id], onDelete: Cascade)
  user      User             @relation("UserOnsiteVisitLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([ticketId, event, createdAt])
  @@index([userId, createdAt])
}

model Attendance {
  id                Int              @id @default(autoincrement())
  userId            Int
  checkInAt         DateTime
  checkOutAt        DateTime?
  checkInLatitude   Decimal?         @db.Decimal(10, 7)
  checkInLongitude  Decimal?         @db.Decimal(10, 7)
  checkInAddress    String?
  checkOutLatitude  Decimal?         @db.Decimal(10, 7)
  checkOutLongitude Decimal?         @db.Decimal(10, 7)
  checkOutAddress   String?
  totalHours        Decimal?         @db.Decimal(4, 2)
  status            AttendanceStatus @default(CHECKED_IN)
  notes             String?
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  user              User             @relation("UserAttendance", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, checkInAt])
  @@index([status])
}

model DailyActivityLog {
  id            Int             @id @default(autoincrement())
  userId        Int
  ticketId      Int?
  activityType  ActivityType
  title         String
  description   String?
  startTime     DateTime
  endTime       DateTime?
  duration      Int?
  location      String?
  latitude      Decimal?        @db.Decimal(10, 7)
  longitude     Decimal?        @db.Decimal(10, 7)
  metadata      Json?
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  ActivityStage ActivityStage[]
  ticket        Ticket?         @relation("TicketActivityLogs", fields: [ticketId], references: [id], onDelete: Cascade)
  user          User            @relation("UserActivityLogs", fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId, startTime])
  @@index([ticketId])
  @@index([activityType])
}

model ActivityStage {
  id               Int              @id @default(autoincrement())
  activityId       Int
  stage            StageType
  startTime        DateTime
  endTime          DateTime?
  duration         Int?
  location         String?
  latitude         Decimal?         @db.Decimal(10, 7)
  longitude        Decimal?         @db.Decimal(10, 7)
  notes            String?
  metadata         Json?
  createdAt        DateTime         @default(now())
  updatedAt        DateTime
  DailyActivityLog DailyActivityLog @relation(fields: [activityId], references: [id], onDelete: Cascade)

  @@index([activityId, startTime])
  @@index([stage])
}

enum UserRole {
  ADMIN
  ZONE_USER
  SERVICE_PERSON
}

enum ContactRole {
  ACCOUNT_OWNER
  CONTACT
}

enum TicketStatus {
  OPEN
  ASSIGNED
  IN_PROCESS
  WAITING_CUSTOMER
  CLOSED_PENDING
  CLOSED
  ONSITE_VISIT
  ONSITE_VISIT_PLANNED
  RESOLVED
  SPARE_PARTS_NEEDED
  SPARE_PARTS_BOOKED
  SPARE_PARTS_DELIVERED
  PENDING
  IN_PROGRESS
  ON_HOLD
  ESCALATED
  PO_NEEDED
  PO_RECEIVED
  CANCELLED
  REOPENED
  ONSITE_VISIT_STARTED
  ONSITE_VISIT_REACHED
  ONSITE_VISIT_IN_PROGRESS
  ONSITE_VISIT_RESOLVED
  ONSITE_VISIT_PENDING
  ONSITE_VISIT_COMPLETED
  PO_REACHED
}

enum SLAStatus {
  ON_TIME
  AT_RISK
  BREACHED
  NOT_APPLICABLE
}

enum Priority {
  LOW
  MEDIUM
  HIGH
  CRITICAL
}

enum CallType {
  UNDER_MAINTENANCE_CONTRACT
  NOT_UNDER_CONTRACT
}

enum NotificationType {
  TICKET_CREATED
  TICKET_UPDATED
  TICKET_COMMENT
  TICKET_ASSIGNED
  PO_CREATED
  PO_UPDATED
  PO_APPROVAL
  SYSTEM_ALERT
  MAINTENANCE
  OTHER
}

enum NotificationStatus {
  UNREAD
  READ
  ARCHIVED
}

enum OnsiteVisitEvent {
  STARTED
  REACHED
  ENDED
  REACHED_BACK
  WORK_STARTED
  WORK_PAUSED
  WORK_RESUMED
  WORK_COMPLETED
  RESOLVED
  PENDING
}

enum AttendanceStatus {
  CHECKED_IN
  CHECKED_OUT
  ABSENT
  LATE
  EARLY_CHECKOUT
}

enum ActivityType {
  TICKET_WORK
  BD_VISIT
  PO_DISCUSSION
  SPARE_REPLACEMENT
  TRAVEL
  TRAINING
  MEETING
  MAINTENANCE
  DOCUMENTATION
  OTHER
  WORK_FROM_HOME
  INSTALLATION
  MAINTENANCE_PLANNED
  REVIEW_MEETING
  RELOCATION
}

enum StageType {
  STARTED
  TRAVELING
  ARRIVED
  WORK_IN_PROGRESS
  COMPLETED
  ASSESSMENT
  PLANNING
  EXECUTION
  TESTING
  DOCUMENTATION
  CUSTOMER_HANDOVER
  PREPARATION
  CLEANUP
}
